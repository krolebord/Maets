// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable

namespace Maets.Data.Migrations.MaetsDb
{
    [DbContext(typeof(MaetsDbContext))]
    [Migration("20220406115710_InitialDataMigration")]
    partial class InitialDataMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Maets.Models.App", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ReleaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Title" }, "apps_title_unique")
                        .IsUnique();

                    b.ToTable("Apps", (string)null);
                });

            modelBuilder.Entity("Maets.Models.AppScreenshot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("App_Screenshots", (string)null);
                });

            modelBuilder.Entity("Maets.Models.AppsDeveloper", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Apps_Developers", (string)null);
                });

            modelBuilder.Entity("Maets.Models.AppsLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("LabelId");

                    b.ToTable("Apps_Labels", (string)null);
                });

            modelBuilder.Entity("Maets.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Maets.Models.CompanyEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyEmployees", (string)null);
                });

            modelBuilder.Entity("Maets.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "labels_name_unique")
                        .IsUnique();

                    b.ToTable("Labels", (string)null);
                });

            modelBuilder.Entity("Maets.Models.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Key" }, "mediafiles_key_unique")
                        .IsUnique();

                    b.ToTable("MediaFiles", (string)null);
                });

            modelBuilder.Entity("Maets.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Maets.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Maets.Models.App", b =>
                {
                    b.HasOne("Maets.Models.Company", "Publisher")
                        .WithMany("PublishedApps")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("apps_publisherid_foreign");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Maets.Models.AppScreenshot", b =>
                {
                    b.HasOne("Maets.Models.App", "App")
                        .WithMany("Screenshots")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("app_screenshots_appid_foreign");

                    b.HasOne("Maets.Models.MediaFile", "File")
                        .WithOne()
                        .HasForeignKey("Maets.Models.AppScreenshot", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("app_screenshots_fileid_foreign");

                    b.Navigation("App");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Maets.Models.AppsDeveloper", b =>
                {
                    b.HasOne("Maets.Models.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("apps_developers_appid_foreign");

                    b.HasOne("Maets.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("apps_developers_companyid_foreign");

                    b.Navigation("App");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Maets.Models.AppsLabel", b =>
                {
                    b.HasOne("Maets.Models.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("apps_labels_appid_foreign");

                    b.HasOne("Maets.Models.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("apps_labels_labelid_foreign");

                    b.Navigation("App");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Maets.Models.Company", b =>
                {
                    b.HasOne("Maets.Models.MediaFile", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("companies_photoid_foreign");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Maets.Models.CompanyEmployee", b =>
                {
                    b.HasOne("Maets.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employees_companyid_foreign");

                    b.HasOne("Maets.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Maets.Models.CompanyEmployee", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("employees_userid_foreign");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Maets.Models.Review", b =>
                {
                    b.HasOne("Maets.Models.App", "App")
                        .WithMany("Reviews")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("reviews_appid_foreign");

                    b.HasOne("Maets.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_authorid_foreign");

                    b.Navigation("App");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Maets.Models.User", b =>
                {
                    b.HasOne("Maets.Models.MediaFile", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_avatarid_foreign");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Maets.Models.App", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Screenshots");
                });

            modelBuilder.Entity("Maets.Models.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PublishedApps");
                });
#pragma warning restore 612, 618
        }
    }
}
